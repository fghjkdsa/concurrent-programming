# 最好不要同时对全局变量进行操作  容易造成混乱
# 如需操作需上锁，确保一个线程对全局变量操作时，其他线程无法操作该全局变量. 注意当设计两个锁及以上时注意防止上死锁
import time
from threading import Thread,Lock

#定义全局变量num
num = 0
# 创建一把互斥锁
lock = Lock()
'''
在两个线程中都调用上锁的方法，则这两个线程就会抢着上锁，
如果有1方成功上锁，那么导致另外一方会堵塞（一直等待）直到这个锁被解开
'''

def test1():
    global num
    lock.acquire() # 上锁
    for i in range(100000): # 当然，上锁的位置可以放在num+=1前然后num+=1后释放，结果有所不同，但是最终都为num=20000,这样可以提高效率，使得一个线程使用num时另一个无法使用
        num+=1
    lock.release() # 释放
    print('test1输出num:',num)

def test2():
    global num
    lock.acquire() # 上锁
    for i in range(100000):
        num+=1
    lock.release() # 释放
    print('test2输出num:', num)

 
if __name__=='__main__':
    t1=Thread(target=test1)
    t2=Thread(target=test2)
    t1.start()
    t2.start()
    t1.join()
    t2.join()
    print('主线程结束')

